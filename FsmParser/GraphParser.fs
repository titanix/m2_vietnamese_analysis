// Implementation file for parser generated by fsyacc
module GraphParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "GraphParser.fsy"

open System


# 11 "GraphParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | NEW_LINE
  | EOF
  | COMMENT_START
  | COMMENT_END
  | QUOTE
  | EQUAL
  | SEMI_COLON
  | COMMA
  | DOT
  | OPEN_ACC
  | CLOSE_ACC
  | OPEN_BRACKET
  | CLOSE_BRACKET
  | STRICT
  | GRAPH
  | DIGRAPH
  | SUBGRAPH
  | RANKDIR
  | ARROW
  | QUOC_LETTER of (string)
  | IDENTIFIER of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_NEW_LINE
    | TOKEN_EOF
    | TOKEN_COMMENT_START
    | TOKEN_COMMENT_END
    | TOKEN_QUOTE
    | TOKEN_EQUAL
    | TOKEN_SEMI_COLON
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_OPEN_ACC
    | TOKEN_CLOSE_ACC
    | TOKEN_OPEN_BRACKET
    | TOKEN_CLOSE_BRACKET
    | TOKEN_STRICT
    | TOKEN_GRAPH
    | TOKEN_DIGRAPH
    | TOKEN_SUBGRAPH
    | TOKEN_RANKDIR
    | TOKEN_ARROW
    | TOKEN_QUOC_LETTER
    | TOKEN_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | NEW_LINE  -> 0 
  | EOF  -> 1 
  | COMMENT_START  -> 2 
  | COMMENT_END  -> 3 
  | QUOTE  -> 4 
  | EQUAL  -> 5 
  | SEMI_COLON  -> 6 
  | COMMA  -> 7 
  | DOT  -> 8 
  | OPEN_ACC  -> 9 
  | CLOSE_ACC  -> 10 
  | OPEN_BRACKET  -> 11 
  | CLOSE_BRACKET  -> 12 
  | STRICT  -> 13 
  | GRAPH  -> 14 
  | DIGRAPH  -> 15 
  | SUBGRAPH  -> 16 
  | RANKDIR  -> 17 
  | ARROW  -> 18 
  | QUOC_LETTER _ -> 19 
  | IDENTIFIER _ -> 20 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_NEW_LINE 
  | 1 -> TOKEN_EOF 
  | 2 -> TOKEN_COMMENT_START 
  | 3 -> TOKEN_COMMENT_END 
  | 4 -> TOKEN_QUOTE 
  | 5 -> TOKEN_EQUAL 
  | 6 -> TOKEN_SEMI_COLON 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_DOT 
  | 9 -> TOKEN_OPEN_ACC 
  | 10 -> TOKEN_CLOSE_ACC 
  | 11 -> TOKEN_OPEN_BRACKET 
  | 12 -> TOKEN_CLOSE_BRACKET 
  | 13 -> TOKEN_STRICT 
  | 14 -> TOKEN_GRAPH 
  | 15 -> TOKEN_DIGRAPH 
  | 16 -> TOKEN_SUBGRAPH 
  | 17 -> TOKEN_RANKDIR 
  | 18 -> TOKEN_ARROW 
  | 19 -> TOKEN_QUOC_LETTER 
  | 20 -> TOKEN_IDENTIFIER 
  | 23 -> TOKEN_end_of_input
  | 21 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 23 
let _fsyacc_tagOfErrorTerminal = 21

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | NEW_LINE  -> "NEW_LINE" 
  | EOF  -> "EOF" 
  | COMMENT_START  -> "COMMENT_START" 
  | COMMENT_END  -> "COMMENT_END" 
  | QUOTE  -> "QUOTE" 
  | EQUAL  -> "EQUAL" 
  | SEMI_COLON  -> "SEMI_COLON" 
  | COMMA  -> "COMMA" 
  | DOT  -> "DOT" 
  | OPEN_ACC  -> "OPEN_ACC" 
  | CLOSE_ACC  -> "CLOSE_ACC" 
  | OPEN_BRACKET  -> "OPEN_BRACKET" 
  | CLOSE_BRACKET  -> "CLOSE_BRACKET" 
  | STRICT  -> "STRICT" 
  | GRAPH  -> "GRAPH" 
  | DIGRAPH  -> "DIGRAPH" 
  | SUBGRAPH  -> "SUBGRAPH" 
  | RANKDIR  -> "RANKDIR" 
  | ARROW  -> "ARROW" 
  | QUOC_LETTER _ -> "QUOC_LETTER" 
  | IDENTIFIER _ -> "IDENTIFIER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | NEW_LINE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | COMMENT_START  -> (null : System.Object) 
  | COMMENT_END  -> (null : System.Object) 
  | QUOTE  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | SEMI_COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | OPEN_ACC  -> (null : System.Object) 
  | CLOSE_ACC  -> (null : System.Object) 
  | OPEN_BRACKET  -> (null : System.Object) 
  | CLOSE_BRACKET  -> (null : System.Object) 
  | STRICT  -> (null : System.Object) 
  | GRAPH  -> (null : System.Object) 
  | DIGRAPH  -> (null : System.Object) 
  | SUBGRAPH  -> (null : System.Object) 
  | RANKDIR  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | QUOC_LETTER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; |]
let _fsyacc_action_rows = 2
let _fsyacc_actionTableElements = [|0us; 16385us; 0us; 49152us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 1us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; |]
let _fsyacc_reductions ()  =    [| 
# 188 "GraphParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 197 "GraphParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "GraphParser.fsy"
                                           "test" 
                   )
# 21 "GraphParser.fsy"
                 : string));
|]
# 208 "GraphParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 24;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : string =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
