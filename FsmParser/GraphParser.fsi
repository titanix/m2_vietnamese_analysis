// Signature file for parser generated by fsyacc
module GraphParser
type token = 
  | DEBUG of (string)
  | NEW_LINE
  | EOF
  | COMMENT of (string)
  | LABEL
  | COLOR
  | QUOTE
  | EQUAL
  | SEMI_COLON
  | COMMA
  | DOT
  | OPEN_ACC
  | CLOSE_ACC
  | OPEN_BRACKET
  | CLOSE_BRACKET
  | STRICT
  | GRAPH
  | DIGRAPH
  | SUBGRAPH
  | RANKDIR
  | ARROW
  | QUOC_LETTER of (string)
  | IDENTIFIER of (string)
type tokenId = 
    | TOKEN_DEBUG
    | TOKEN_NEW_LINE
    | TOKEN_EOF
    | TOKEN_COMMENT
    | TOKEN_LABEL
    | TOKEN_COLOR
    | TOKEN_QUOTE
    | TOKEN_EQUAL
    | TOKEN_SEMI_COLON
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_OPEN_ACC
    | TOKEN_CLOSE_ACC
    | TOKEN_OPEN_BRACKET
    | TOKEN_CLOSE_BRACKET
    | TOKEN_STRICT
    | TOKEN_GRAPH
    | TOKEN_DIGRAPH
    | TOKEN_SUBGRAPH
    | TOKEN_RANKDIR
    | TOKEN_ARROW
    | TOKEN_QUOC_LETTER
    | TOKEN_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_graph_def
    | NONTERM_transition
    | NONTERM_node
    | NONTERM_attributes
    | NONTERM_attribute_content
    | NONTERM_label_content
    | NONTERM_label_value
    | NONTERM_color_content
    | NONTERM_node_group
    | NONTERM_node_group_content
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (string) 
