%{
open System
open System.Diagnostics
open System.Collections.Generic

let log (x:string) = Debug.WriteLine ("call to rule\t" + x)

let mutable transition_table: (string * string * char) list option = None
let tr_table = new List<string * string * char>()
%}

%token <string> IDENTIFIER
%token <string> QUOC_LETTER
%token ARROW

%token STRICT GRAPH DIGRAPH SUBGRAPH RANKDIR
%token OPEN_ACC CLOSE_ACC OPEN_BRACKET CLOSE_BRACKET
%token QUOTE EQUAL SEMI_COLON COMMA DOT
%token LABEL COLOR
%token <string> COMMENT
%token NEW_LINE EOF

%token <string> DEBUG

%start start
%type <string> start

%%

start:	/* empty */ 									{ log "empty" ; "test" }
	| DIGRAPH OPEN_ACC graph_def CLOSE_ACC				{ log "start 0" ; "" }
	| DIGRAPH OPEN_ACC graph_def CLOSE_ACC EOF			{ log "start 1" ; "" }
	| STRICT DIGRAPH OPEN_ACC graph_def CLOSE_ACC EOF	{ log "start 2" ; "pwet" }

graph_def:
	transition											{ log "g1" }
	| transition graph_def								{ log "g2" }
	| node SEMI_COLON graph_def							{ log "gNode" }
	| NEW_LINE graph_def								{ log "gNL"}
	| COMMENT graph_def									{ log "gCOM" }

	| /* empty */ { log "gEmpty" }

transition:
	node ARROW node attributes SEMI_COLON				{ log "t1" ; 
        List.map (fun c -> tr_table.Add(($1, $3, c))) $4 ; ()}
	| node_group ARROW node attributes SEMI_COLON		{ log "t2" ;
        List.map (fun n -> List.map (fun c -> tr_table.Add((n, $3, c))) $4) $1 ; () }

node:
	IDENTIFIER											{ log ("i1: " + $1) ; $1 }
	| QUOTE IDENTIFIER QUOTE							{ log ("iQuote: " + $2) ; $2 }

attributes: /* empty */
	| OPEN_BRACKET attribute_content CLOSE_BRACKET		{ log "attr1" ; $2 }

attribute_content: 
	label_content										{ log "attr_c1" ; $1 }
	| color_content										{ log "attr_c2" ; [] }
	| label_content COMMA attribute_content				{ log "attr_c3" ; $1 }
	| color_content COMMA attribute_content				{ log "attr_c4" ; $3 }

label_content:
	LABEL EQUAL QUOTE label_value QUOTE					{ log "label_content"  ; $4 }

label_value: 
	QUOC_LETTER											{ log "quoc1" ; [$1.[0]] }
	| QUOC_LETTER COMMA label_value						{ log "quoc2" ; $1.[0] :: $3 }

color_content:
	COLOR EQUAL QUOTE IDENTIFIER QUOTE					{ log "color_content" }

node_group: 
	OPEN_ACC node_group_content CLOSE_ACC				{ log "node_group1" ; $2 }

node_group_content:
	node												{ log "n_grp_c1" ; [$1] }
	| node node_group_content							{ log "n_grp_c2" ; $1 :: $2 }
	| NEW_LINE node_group_content						{ log "n_grp_c3" ; $2 }

%%
let print_result = List.map (fun (n1, n2, t) -> Console.WriteLine("transition :" + n1 + " " + n2 + " " + t )) tr_table